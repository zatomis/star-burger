from django.db import models
from django.core.validators import MinValueValidator
from django.db.models import Count, F, Sum
from phonenumber_field.modelfields import PhoneNumberField
from django.utils.timezone import now


class Restaurant(models.Model):
    name = models.CharField(
        '–Ω–∞–∑–≤–∞–Ω–∏–µ',
        max_length=50
    )
    address = models.CharField(
        '–∞–¥—Ä–µ—Å',
        max_length=100,
        blank=True,
    )
    contact_phone = models.CharField(
        '–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω',
        max_length=50,
        blank=True,
    )

    class Meta:
        verbose_name = '—Ä–µ—Å—Ç–æ—Ä–∞–Ω'
        verbose_name_plural = '—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã'

    def __str__(self):
        return self.name


class ProductQuerySet(models.QuerySet):
    def available(self):
        products = (
            RestaurantMenuItem.objects
            .filter(availability=True)
            .values_list('product')
        )
        return self.filter(pk__in=products)


class ProductCategory(models.Model):
    name = models.CharField(
        '–Ω–∞–∑–≤–∞–Ω–∏–µ',
        max_length=50
    )

    class Meta:
        verbose_name = '–∫–∞—Ç–µ–≥–æ—Ä–∏—è'
        verbose_name_plural = '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏'

    def __str__(self):
        return self.name


class Product(models.Model):
    name = models.CharField(
        '–Ω–∞–∑–≤–∞–Ω–∏–µ',
        max_length=50
    )
    category = models.ForeignKey(
        ProductCategory,
        verbose_name='–∫–∞—Ç–µ–≥–æ—Ä–∏—è',
        related_name='products',
        null=True,
        blank=True,
        on_delete=models.SET_NULL,
    )
    price = models.DecimalField(
        '—Ü–µ–Ω–∞',
        max_digits=8,
        decimal_places=2,
        validators=[MinValueValidator(0)]
    )
    image = models.ImageField(
        '–∫–∞—Ä—Ç–∏–Ω–∫–∞'
    )
    special_status = models.BooleanField(
        '—Å–ø–µ—Ü.–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
        default=False,
        db_index=True,
    )
    description = models.TextField(
        '–æ–ø–∏—Å–∞–Ω–∏–µ',
        max_length=200,
        blank=True,
    )

    objects = ProductQuerySet.as_manager()

    class Meta:
        verbose_name = '—Ç–æ–≤–∞—Ä'
        verbose_name_plural = '—Ç–æ–≤–∞—Ä—ã'

    def __str__(self):
        return self.name


class RestaurantMenuItem(models.Model):
    restaurant = models.ForeignKey(
        Restaurant,
        related_name='menu_items',
        verbose_name="—Ä–µ—Å—Ç–æ—Ä–∞–Ω",
        on_delete=models.CASCADE,
    )
    product = models.ForeignKey(
        Product,
        on_delete=models.CASCADE,
        related_name='menu_items',
        verbose_name='–ø—Ä–æ–¥—É–∫—Ç',
    )
    availability = models.BooleanField(
        '–≤ –ø—Ä–æ–¥–∞–∂–µ',
        default=True,
        db_index=True
    )

    class Meta:
        verbose_name = '–ø—É–Ω–∫—Ç –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞'
        verbose_name_plural = '–ø—É–Ω–∫—Ç—ã –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞'
        unique_together = [
            ['restaurant', 'product']
        ]

    def __str__(self):
        return f"{self.restaurant.name} - {self.product.name}"

class OrderQuerySet(models.QuerySet):

    def total_count(self):
        return self.annotate(total_count_position=Count(F("order_states")))


    def total_price(self):
        return self.annotate(
            total_price=Sum(F("order_states__price"))
        )

class UserOrder(models.Model):
    ORDER_CHOICES = (
        (-1, '–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω'),
        (0, '–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π'),
        (1, '–ü—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É'),
        (2, '–ó–∞–∫–∞–∑ –Ω–∞ —Å–±–æ—Ä–∫–µ'),
        (3, '–ü–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É'),
    )
    firstname = models.CharField('–ò–º—è', max_length=50, null=False)
    lastname = models.CharField('–§–∞–º–∏–ª–∏—è', max_length=50, null=False)
    address = models.CharField('–ê–¥—Ä–µ—Å –∑–∞–∫–∞–∑–∞', max_length=250, null=False)
    phonenumber = PhoneNumberField('–ù–æ–º–µ—Ä üì≥', region='RU', blank=True, null=True)
    order_date = models.DateTimeField(help_text="–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞", default=now, editable=False, verbose_name='–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞')
    comment = models.TextField(verbose_name="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", blank=True)
    status = models.SmallIntegerField(default=0, verbose_name='–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞', choices=ORDER_CHOICES, db_index=True)

    objects = OrderQuerySet.as_manager()

    class Meta:
        verbose_name = '–∑–∞–∫–∞–∑'
        verbose_name_plural = '–∑–∞–∫–∞–∑—ã'

    def __str__(self):
        return f'{self.firstname} —Ç.{self.phonenumber} ({self.get_status_display()})'


class OrderState(models.Model):
    order = models.ForeignKey(UserOrder, verbose_name="–∑–∞–∫–∞–∑", on_delete=models.CASCADE, related_name="order_states")
    product = models.ForeignKey(Product, verbose_name="—Ç–æ–≤–∞—Ä", on_delete=models.CASCADE, related_name="orders")
    quantity = models.SmallIntegerField(default=0, verbose_name='–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–∞')
    price = models.DecimalField(
        verbose_name="—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏",
        validators=[MinValueValidator(0)],
        decimal_places=2,
        max_digits=7,
        blank=True,
    )
    class Meta:
        verbose_name = '–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞'
        verbose_name_plural = '–ó–∞–∫–∞–∑—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã'

    def __str__(self):
        return f'{self.product} [{self.quantity}]'
